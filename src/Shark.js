/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: BlueMesh (https://sketchfab.com/VapTor)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/great-white-shark-b67415aaa0bd450d865f9604dcdac244
title: Great White Shark
npx gltfjsx great_white_shark.glb 
*/
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: DigitalLife3D (https://sketchfab.com/DigitalLife3D)
license: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
source: https://sketchfab.com/3d-models/model-54a-caribbean-reef-shark-210302e0e0e74c36834fb00aaa14c7c2
title: Model 54A - Caribbean Reef Shark
*/

import React, { useRef, useEffect } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
// import { Quaternion } from 'three';
// import { useSpring, animated, config } from '@react-spring/three';

export function Shark(props) {
  const group = useRef();
  const sharkBodyRefShadow = useRef();
  const innerGroup = useRef();
  const { nodes, materials, animations } = useGLTF(
    '/models/caribbean_reef_shark.glb'
  );
  const { actions } = useAnimations(animations, group);
  useEffect(() => {
    const animationAction = actions.Action;
    animationAction.play();
  });
  // complicated way of rotating:
  // https://www.html5gamedevs.com/topic/39335-make-sprite-follow-cursor-including-rotating-it-but-in-steps/
  //https://codesandbox.io/s/react-spring-looping-gmlq8?from-embed
  /*const { param } = useSpring({
    from: {param:0},
    to: {param:5},
    config: config.wobbly,
    reset: true,
  });*/
  const elongationUpDown = 0.01;
  let elongationUpDownDelta = 0;

  const elongationLeftRight = 0.01;
  let elongationLeftRightDelta = 0;

  let time = 0;
  useFrame((gl, delta) => {
    time += delta;
    elongationUpDownDelta = elongationUpDown * Math.sin(time);
    elongationLeftRightDelta = elongationLeftRight * Math.sin(time);
    innerGroup.current.position.y =
      innerGroup.current.position.y + elongationUpDownDelta;
    innerGroup.current.position.z =
      innerGroup.current.position.z + elongationLeftRightDelta;
    group.current.rotation.y = group.current.rotation.y - delta / 5;
    // update shadow somehow..
    //sharkBodyRefShadow.current.position.z = Math.sin(time);
    //console.log(sharkBodyRefShadow.current.position.z);
  });

  return (
    <group name="outer-group" ref={group} {...props} dispose={null}>
      <group name="Sketchfab_model" scale={1}>
        <group
          ref={innerGroup}
          name="inner-group"
          scale={10}
          position={[0, 0, 100]}
        >
          <primitive object={nodes.GLTF_created_0_rootJoint} />
          <skinnedMesh
            name="Object_7"
            geometry={nodes.Object_7.geometry}
            material={materials.Diffuse_Eye}
            skeleton={nodes.Object_7.skeleton}
          />
          <skinnedMesh
            ref={sharkBodyRefShadow}
            name="Object_8"
            geometry={nodes.Object_8.geometry}
            material={materials.CRS_Material}
            skeleton={nodes.Object_8.skeleton}
            castShadow
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/caribbean_reef_shark.glb');
