/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'

export function Model(props) {
  const { nodes, materials } = useGLTF('/level.glb')
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Level.geometry} material={materials.Level} position={[-0.38, 0.69, 0.62]} rotation={[Math.PI / 2, -Math.PI / 9, 0]} />
      <mesh geometry={nodes.Cactus.geometry} material={materials.Cactus} position={[-0.42, 0.51, -0.62]} rotation={[Math.PI / 2, 0, 0]} />
      <group position={[-0.58, 0.83, -0.03]} rotation={[Math.PI / 2, 0, 0.47]}>
        <mesh geometry={nodes.Camera_1.geometry} material={materials.Level} />
        <mesh geometry={nodes.Camera_2.geometry} material={materials.Level} />
        <mesh geometry={nodes.Camera_3.geometry} material={materials.Level} />
        <mesh geometry={nodes.Camera_4.geometry} material={materials.Level} />
        <mesh geometry={nodes.Camera_5.geometry} material={materials.Level} />
        <mesh geometry={nodes.Camera_6.geometry} material={materials.Level} />
        <mesh geometry={nodes.Camera_7.geometry} material={materials.Lens} />
        <mesh geometry={nodes.Camera_8.geometry} material={materials.Level} />
        <mesh geometry={nodes.Camera_9.geometry} material={materials.Level} />
      </group>
      <mesh geometry={nodes.Cube.geometry} material={materials.Cube} position={[-0.8, 1.24, 0.61]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Pyramid.geometry} material={materials.Pyramid} position={[-0.8, 1.33, 0.25]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Sudo.geometry} material={materials.Level} position={[0.68, 0.33, -0.67]} rotation={[Math.PI / 2, 0, 0.29]} />
      <group position={[0.68, 0.33, -0.67]} rotation={[Math.PI / 2, 0, 0.29]}>
        <mesh geometry={nodes.SudoHead_1.geometry} material={materials.Level} />
        <mesh geometry={nodes.SudoHead_2.geometry} material={materials.Level} />
      </group>
    </group>
  )
}

useGLTF.preload('/level.glb')
